package org.abstractmeta.code.g.core.code.builder;


import org.abstractmeta.code.g.code.JavaConstructor;
import org.abstractmeta.code.g.code.JavaField;
import org.abstractmeta.code.g.code.JavaMethod;
import org.abstractmeta.code.g.code.JavaType;
import org.abstractmeta.code.g.core.code.JavaTypeImpl;
import org.abstractmeta.code.g.handler.JavaFieldHandler;
import org.abstractmeta.code.g.handler.JavaMethodHandler;
import org.abstractmeta.code.g.handler.JavaTypeHandler;

import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.util.*;


/**
 * Provide generateBuilder implementation of org.abstractmeta.toolbox.code.JavaType
 * This class has been auto-generated by code-g.
 */
public class JavaTypeBuilder {

    public static final String CODE_G_GENERATOR_SIGNATURE = "This source code was automatically generated by code-g generator.";

    private JavaType sourceType;

    private List<JavaFieldHandler> fieldListeners = new ArrayList<JavaFieldHandler>();

    private List<JavaTypeHandler> typeListeners = new ArrayList<JavaTypeHandler>();

    private final List<JavaMethodHandler> methodListeners = new ArrayList<JavaMethodHandler>();

    private List<JavaField> fields = new ArrayList<JavaField>();

    private List<JavaMethod> methods = new ArrayList<JavaMethod>();

    private List<JavaConstructor> constructors = new ArrayList<JavaConstructor>();

    private List<Type> genericTypeArguments = new ArrayList<Type>();

    private Set<Type> importTypes = new HashSet<Type>();

    private List<Type> superInterfaces = new ArrayList<Type>();

    private String packageName;

    private String kind;

    private List<String> body = new ArrayList<String>();

    private Type superType;

    private List<JavaType> nestedJavaTypes = new ArrayList<JavaType>();

    private List<String> modifiers = new ArrayList<String>();

    private String name;

    private List<Annotation> annotations = new ArrayList<Annotation>();

    private List<String> documentation = new ArrayList<String>();

    private boolean nested;

    public JavaTypeBuilder setSourceType(JavaType sourceType) {
        this.sourceType = sourceType;
        return this;
    }

    public JavaTypeBuilder setTypeName(String typeName) {
        setName(typeName);
        int dotIndex = typeName.lastIndexOf('.');
        if (dotIndex != -1) {
            setPackageName(typeName.substring(0, dotIndex));
        } else {
            throw new IllegalStateException("Invalid type name: " + typeName);
        }
        return this;
    }


    public String getSimpleName() {
        if (name == null) {
            throw new IllegalArgumentException("name was null");
        }
        String name = this.name.replace('$', '.');
        int dotIndex = name.lastIndexOf('.');
        if (dotIndex != -1) {
            return name.substring(dotIndex + 1, name.length());
        } else {
            return name;
        }
    }

    public JavaTypeBuilder addFieldListener(JavaFieldHandler fieldListener) {
        this.fieldListeners.add(fieldListener);
        return this;
    }

    public JavaTypeBuilder addTypeListener(JavaTypeHandler typeListener) {
        this.typeListeners.add(typeListener);
        return this;
    }

    public JavaTypeBuilder addMethodListener(JavaMethodHandler methodListener) {
        this.methodListeners.add(methodListener);
        return this;
    }


    public List<JavaField> getFields() {
        return this.fields;
    }

    public JavaTypeBuilder setFields(List<JavaField> fields) {
        this.fields = fields;
        return this;
    }


    public JavaTypeBuilder addField(JavaField field) {
        this.fields.add(field);
        return this;
    }

    public JavaTypeBuilder addFields(Collection<JavaField> fields) {
        this.fields.addAll(fields);
        return this;
    }


    public boolean containsMethod(String methodName) {
        for (JavaMethod method : getMethods()) {
            if (methodName.equals(method.getName())) {
                return true;
            }
        }
        return false;
    }

    public JavaMethod getMethod(String methodName) {
        for (JavaMethod method : getMethods()) {
            if (methodName.equals(method.getName())) {
                return method;
            }
        }
        return null;
    }

    public List<JavaMethod> getMethods(String methodName) {
        List<JavaMethod> result = new ArrayList<JavaMethod>();
        for (JavaMethod method : getMethods()) {
            if (methodName.equals(method.getName())) {
                result.add(method);
            }
        }
        return result;
    }


    public List<JavaMethod> getMethods() {
        return this.methods;
    }

    public JavaTypeBuilder setMethods(List<JavaMethod> methods) {
        this.methods = methods;
        return this;
    }


    public JavaTypeBuilder addMethod(JavaMethod method) {
        this.methods.add(method);
        return this;
    }

    public JavaTypeBuilder addMethods(Collection<JavaMethod> methods) {
        this.methods.addAll(methods);
        return this;
    }

    public List<JavaConstructor> getConstructors() {
        return this.constructors;
    }

    public JavaTypeBuilder setConstructors(List<JavaConstructor> constructors) {
        this.constructors = constructors;
        return this;
    }

    public JavaTypeBuilder addConstructor(JavaConstructor constructor) {
        this.constructors.add(constructor);
        return this;
    }

    public JavaTypeBuilder addConstructors(Collection<JavaConstructor> constructors) {
        this.constructors.addAll(constructors);
        return this;
    }

    public List<Type> getSuperInterfaces() {
        return this.superInterfaces;
    }

    public JavaTypeBuilder setSuperInterfaces(List<Type> superInterfaces) {
        this.superInterfaces = superInterfaces;
        return this;
    }

    public JavaTypeBuilder addSuperInterface(Type superInterface) {
        this.superInterfaces.add(superInterface);
        return this;
    }

    public JavaTypeBuilder addSuperInterfaces(Collection<Type> superInterfaces) {
        this.superInterfaces.addAll(superInterfaces);
        return this;
    }


    public Set<Type> getImportTypes() {
        return this.importTypes;
    }

    public JavaTypeBuilder setImportTypes(Set<Type> importTypes) {
        this.importTypes = importTypes;
        return this;
    }

    public JavaTypeBuilder addImportType(Type importType) {
        this.importTypes.add(importType);
        return this;
    }

    public JavaTypeBuilder addImportTypes(Collection<Type> importTypes) {
        this.importTypes.addAll(importTypes);
        return this;
    }

    public String getPackageName() {
        return this.packageName;
    }

    public JavaTypeBuilder setPackageName(String packageName) {
        this.packageName = packageName;
        return this;
    }

    public String getKind() {
        return this.kind;
    }

    public JavaTypeBuilder setKind(String kind) {
        this.kind = kind;
        return this;
    }

    public List<String> getBody() {
        return this.body;
    }

    public JavaTypeBuilder setBody(List<String> body) {
        this.body = body;
        return this;
    }

    public JavaTypeBuilder addBody(String body) {
        this.body.add(body);
        return this;
    }

    public JavaTypeBuilder addBody(Collection<String> body) {
        this.body.addAll(body);
        return this;
    }


    public Type getSuperType() {
        return this.superType;
    }

    public JavaTypeBuilder setSuperType(Type superType) {
        this.superType = superType;
        return this;
    }

    public List<JavaType> getNestedJavaTypes() {
        return this.nestedJavaTypes;
    }

    public JavaTypeBuilder setNestedJavaTypes(List<JavaType> nestedJavaTypes) {
        this.nestedJavaTypes = nestedJavaTypes;
        return this;
    }

    public JavaTypeBuilder addNestedJavaType(JavaType classType) {
        this.nestedJavaTypes.add(classType);
        return this;
    }

    public JavaTypeBuilder addNestedJavaTypes(Collection<JavaType> classTypes) {
        this.nestedJavaTypes.addAll(classTypes);
        return this;
    }

    public List<String> getModifiers() {
        return this.modifiers;
    }

    public JavaTypeBuilder setModifiers(List<String> modifiers) {
        this.modifiers = modifiers;
        return this;
    }

    public JavaTypeBuilder addModifier(String modifier) {
        this.modifiers.add(modifier);
        return this;
    }

    public JavaTypeBuilder addModifiers(Collection<String> modifiers) {
        this.modifiers.addAll(modifiers);
        return this;
    }

    public String getName() {
        return this.name;
    }

    public JavaTypeBuilder setName(String name) {
        this.name = name;
        return this;
    }

    public List<Annotation> getAnnotations() {
        return this.annotations;
    }

    public JavaTypeBuilder setAnnotations(List<Annotation> annotations) {
        this.annotations = annotations;
        return this;
    }

    public JavaTypeBuilder addAnnotation(Annotation annotation) {
        this.annotations.add(annotation);
        return this;
    }

    public JavaTypeBuilder addAnnotations(Collection<Annotation> annotations) {
        this.annotations.addAll(annotations);
        return this;
    }

    public List<String> getDocumentation() {
        return this.documentation;
    }

    public JavaTypeBuilder setDocumentation(List<String> documentation) {
        this.documentation = documentation;
        return this;
    }

    public JavaTypeBuilder addDocumentation(String documentation) {
        this.documentation.add(documentation);
        return this;
    }

    public JavaTypeBuilder addDocumentation(Collection<String> documentation) {
        this.documentation.addAll(documentation);
        return this;
    }

    public JavaTypeBuilder setNested(boolean nested) {
        this.nested = nested;
        return this;
    }

    public boolean isNested() {
        return nested;
    }

    public void setGenericTypeArguments(List<Type> genericTypeArguments) {
        this.genericTypeArguments = genericTypeArguments;
    }

    public void addGenericTypeArguments(Type... genericTypeArguments) {
        Collections.addAll(this.genericTypeArguments, genericTypeArguments);
    }

    public void addGenericTypeArguments(Collection<Type> genericTypeArguments) {
        this.genericTypeArguments.addAll(genericTypeArguments);
    }

    public JavaType build() {

        for (JavaMethod method : getMethods()) {
            for (JavaMethodHandler methodListener : methodListeners) {
                methodListener.handle(sourceType, method);
            }
        }

        for (JavaField field : new ArrayList<JavaField>(getFields())) {
            for (JavaFieldHandler fieldListener : fieldListeners) {
                fieldListener.handle(sourceType, field);
            }
        }

        for (JavaTypeHandler typeListener : typeListeners) {
            typeListener.handle(sourceType);
        }
        addDocumentation(CODE_G_GENERATOR_SIGNATURE);
        return new JavaTypeImpl(getFields(), getMethods(), getConstructors(), importTypes, superInterfaces, packageName, kind, body, superType, nestedJavaTypes, modifiers, name, annotations, documentation, nested, getSimpleName(), genericTypeArguments);
    }


    public JavaTypeBuilder merge(JavaType instance) {
        if (instance.getFields() != null) {
            addFields(instance.getFields());
        }
        if (instance.getMethods() != null) {
            addMethods(instance.getMethods());
        }
        if (instance.getConstructors() != null) {
            addConstructors(instance.getConstructors());
        }
        if (instance.getImportTypes() != null) {
            addImportTypes(instance.getImportTypes());
        }
        if (instance.getSuperInterfaces() != null) {
            addSuperInterfaces(instance.getSuperInterfaces());
        }
        if (instance.getPackageName() != null) {
            setPackageName(instance.getPackageName());
        }
        if (instance.getKind() != null) {
            setKind(instance.getKind());
        }
        if (instance.getBody() != null) {
            addBody(instance.getBody());
        }
        if (instance.getSuperType() != null) {
            setSuperType(instance.getSuperType());
        }
        if (instance.getNestedJavaTypes() != null) {
            addNestedJavaTypes(instance.getNestedJavaTypes());
        }
        if (instance.getModifiers() != null) {
            addModifiers(instance.getModifiers());
        }
        if (instance.getName() != null) {
            setName(instance.getName());
        }
        if (instance.getAnnotations() != null) {
            addAnnotations(instance.getAnnotations());
        }
        if (instance.getDocumentation() != null) {
            addDocumentation(instance.getDocumentation());
        }
        return this;
    }

}