package org.abstractmeta.code.g.core.plugin;

import java.util.Arrays;
import java.util.Collection;
import java.util.Map;
import org.abstractmeta.code.g.core.test.AMessage;
/**
 * This source code was automatically generated by code-g plugin.
 */

public class AMessageImpl  {
    /**
     *  extends IMessage
    implements Commandify<IMessage>
    private transient Commands<IMessage> commands;

    public AMessageImpl(int id) {
        super(id);
        this.commands =  new CommandsImpl<IMessage>(IMessage.class, new Constructor0Command(new Object[]{id}));
    }

    public void setType(final String type) {
        commands.add(new TypeCommands(type, getType()));
        super.setType(type);
    }

    public String getType() {
        return super.getType();
    }

    public void setMap(Map<String, String> map) {
        map = new CommandifyMap<String,String>(map);
        commands.add(new MapCommands(map, getMap()));
        super.setMap(map);
    }

    public Map<String, String> getMap() {
        return super.getMap();
    }

    public void setCollection(Collection<String> collection) {
        collection = new CommandifyCollection<String>(collection);
        commands.add(new CollectionCommands(collection, getCollection()));
        super.setCollection(collection);
    }

    public Collection<String> getCollection() {
        return super.getCollection();
    }

    public Commands<IMessage> getCommands() {
        return this.commands;
    }


    public static class TypeCommands extends AbstractFieldCommand<IMessage, String> {

        public TypeCommands(String type, String previousType) {
            super("type", type, previousType);
        }

        public void execute(IMessage instance) {
            instance.setType(getValue());
        }

    }
    public static class MapCommands extends AbstractFieldCommand<IMessage, Map<String, String>> {

        public MapCommands(Map<String, String> map, Map<String, String> previousMap) {
            super("map", map, previousMap);
        }

        public void execute(IMessage instance) {
            instance.setMap(getValue());
        }

    }
    public static class CollectionCommands extends AbstractFieldCommand<IMessage, Collection<String>> {

        public CollectionCommands(Collection<String> collection, Collection<String> previousCollection) {
            super("collection", collection, previousCollection);
        }

        public void execute(IMessage instance) {
            instance.setCollection(getValue());
        }

    }
    public static class Constructor0Command extends AbstractConstructorCommand<IMessage> {

        public Constructor0Command(Object [] values) {
            super(new Class[]{int.class}, values);
        }

        public IMessage execute() {
            return new AMessageImpl((Integer)getValues()[0]);
        }

    }
     */
}