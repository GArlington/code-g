package org.abstractmeta.code.g.core.plugin;


import org.abstractmeta.code.g.core.test.IMessage;
/**
 * This source code was automatically generated by code-g plugin.
 */

public class IMessageImpl  {

/*

implements IMessage, Commandify<IMessageImpl>
    private String name;
    private final Map<String, String> map;
    private final int id;
    private transient Commands<IMessageImpl> commands;

    public IMessageImpl(Map<String, String> map, int id) {
        super();
        this.map = map;
        this.id = id;
        this.commands =  new CommandsImpl<IMessageImpl>(IMessageImpl.class, new Constructor0Command(new Object[]{map, id}));
    }

    public void setName(final String name) {
        commands.add(new NameCommands(name, getName()));
        this.name = name;
    }

    public String getName() {
        return this.name;
    }

    public Map<String, String> getMap() {
        return this.map;
    }

    public int getId() {
        return this.id;
    }

    public Commands<IMessageImpl> getCommands() {
        return this.commands;
    }


    public static class NameCommands extends AbstractFieldCommand<IMessageImpl, String> {

        public NameCommands(String name, String previousName) {
            super("name", name, previousName);
        }

        public void execute(IMessageImpl instance) {
            instance.setName(getValue());
        }

    }
    public static class Constructor0Command extends AbstractConstructorCommand<IMessageImpl> {

        public Constructor0Command(Object [] values) {
            super(new Class[]{Map.class,int.class}, values);
        }

        @SuppressWarnings(value = {"unchecked"})
        public IMessageImpl execute() {
            return new IMessageImpl((Map<String, String>)getValues()[0], (Integer)getValues()[1]);
        }

    }

    */
}